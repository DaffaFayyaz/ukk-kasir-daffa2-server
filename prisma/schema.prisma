generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 String             @id @db.VarChar(110)
  name               String             @db.VarChar(255)
  deskripsi          String             @db.VarChar(200)
  price              Int
  kategori           kategori           @default(Makanan)
  stock              stock              @default(Tersedia)
  image              String?            @db.VarChar(255)
  discountDetails    DiscountDetail[]
  created_at         DateTime?          @default(now()) @db.Timestamp(0)
  updated_at         DateTime?          @default(now()) @db.Timestamp(0)
  
  transactions_items TransactionsItem[]

  @@map("products")
}

model Meja {
  id      String  @id @db.VarChar(110)
  no_meja String  @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  transactions Transaction[]
}

model Transaction {
  id                 String              @id @db.VarChar(110)
  total              Int
  status             transactions_status
  status_pemesanan   status_pemesanan    @default(Menunggu)
  customer_name      String              @db.VarChar(255)
  customer_email     String              @db.VarChar(255)
  snap_token         String?             @db.VarChar(255)
  snap_redirect_url  String?             @db.VarChar(255)
  payment_method     String?             @db.VarChar(110)
  id_meja            String              @db.VarChar(110)
  meja               Meja                @relation(fields: [id_meja], references: [id])
  created_at         DateTime?           @default(now()) @db.Timestamp(0)
  updated_at         DateTime?           @default(now()) @db.Timestamp(0)
  transactions_items TransactionsItem[]

  @@map("transactions")
}

model TransactionsItem {
  id             String      @id @db.VarChar(110)
  transaction_id String      @db.VarChar(110)
  product_id     String      @db.VarChar(110)
  product_name   String      @db.VarChar(255)
  price          Int
  potongan_harga Int?
  quantity       Int
  created_at     DateTime?   @default(now()) @db.Timestamp(0)
  updated_at     DateTime?   @default(now()) @db.Timestamp(0)
  transactions   Transaction @relation(fields: [transaction_id], references: [id], onUpdate: Restrict, onDelete: Cascade, map: "transactions_items_ibfk_1")
  products       Product     @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "transactions_items_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([transaction_id], map: "transaction_id")
  @@map("transactions_items")
}

model Users {
  id            String  @id @db.VarChar(110)
  name          String  @db.VarChar(255)
  email         String  @db.VarChar(100)
  password      String  @db.VarChar(255)
  role          role    @default(Kasir)
  refresh_token String? @db.VarChar(500)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
}

model Discount {
  id            String          @id @db.VarChar(110)
  nama_discount String          @db.VarChar(50)
  potongan_harga Int
  tgl_end       DateTime
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)

  discountDetails DiscountDetail[]
}

model DiscountDetail {
  id String  @id @db.VarChar(110)
  id_product String  @db.VarChar(110)
  product Product @relation(fields: [id_product], references: [id])
  id_discount String @db.VarChar(110)
  discount Discount @relation(fields: [id_discount], references: [id])
  potongan_harga Int

  @@map("discount_detail")
}


enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}

enum role {
  Kasir
  Admin
}

enum kategori {
  Makanan
  Minuman
}

enum stock {
  Tersedia
  Kosong
}

enum status_pemesanan {
  Menunggu
  Diproses
  Selesai
}
